ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
print(ywdT)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr, v$bumps))
plot(x, ywr, ylim=yl, type="l")
lines(x, v$bumps, lty=2)
y<-doppler(tt)+eps
n<-length(eps)
n<-length(eps)
y<-doppler(1:n/n)+eps
plot(y)
plot(eps)
n<-length(eps)
y<-doppler(1:n/n)+eps/10
n<-length(eps)
y<-doppler(1:n/n)+eps/100
plot(y)
n<-length(eps)
y<-doppler(1:n/n)+eps/10
plot(y)
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr, v$bumps))
plot(x, ywr, ylim=yl, type="l")
lines(x, v$bumps, lty=2)
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr, v$bumps))
plot(1:n, ywr, ylim=yl, type="l")
lines(1:n, y, lty=2)
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr))
plot(1:n, ywr, ylim=yl, type="l")
lines(1:n, y, lty=2)
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr))
plot(1:n, ywr, ylim=yl, type="l")
lines(1:n, y, lty=1,col=8)
#extra example (from WaveThresh that I saw before)
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr))
plot(1:n, ywr, ylim=yl, type="l")
lines(1:n, y, lty=1,col=8)
lines(doppler(1:n/n),col=4,lwd=2)
eps <- arima.sim(n=1024, model=list(ar=0.5, ma=1))
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr))
plot(1:n, ywr, ylim=yl, type="l")
lines(1:n, y, lty=1,col=8)
lines(doppler(1:n/n),col=4,lwd=2)
#extra example (from WaveThresh that I saw before)
eps <- arima.sim(n=1024, model=list(ar=0.5, ma=1))
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr))
plot(1:n, ywr, ylim=yl, type="l",col=2,lwd=2)
lines(1:n, y, lty=1,col=8)
lines(doppler(1:n/n),col=4,lwd=2)
eps <- arima.sim(n=1024, model=list(ar=0.5, ma=1))
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr))
plot(1:n, y, ylim=yl, type="l",col=8,lwd=1)
lines(1:n, ywr, lty=1,col=2,lwd=2)
lines(doppler(1:n/n),col=4,lwd=2)
eps <- arima.sim(n=1024, model=list(ar=0.25, ma=1))
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(ywr))
plot(1:n, y, ylim=yl, type="l",col=8,lwd=1)
lines(1:n, ywr, lty=1,col=2,lwd=2)
lines(doppler(1:n/n),col=4,lwd=2)
eps <- arima.sim(n=1024, model=list(ar=0.25, ma=1))
n<-length(eps)
y<-doppler(1:n/n)+eps/10
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal")) #
yl <- range(c(y,ywr))
plot(1:n, y, ylim=yl, type="l",col=8,lwd=1)
lines(1:n, ywr, lty=1,col=2,lwd=2)
lines(doppler(1:n/n),col=4,lwd=2)
library(ShapeChange)
# Generate some values in (0,1), then sort them (for plotting)
#
tt <- sort(runif(100))
#
# Now evaluate the \code{\link{doppler}} function and add
# some noise.
#
yy <- doppler(tt) + rnorm(100, 0, 0.15)
#
# Now make the grid with this data
#
yygrid <- makegrid(t=tt, y=yy)
library("wavetresh")
library("wavethresh")
library("EbayesThresh")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Nason's Book
yhat<-nason(y)$yhat
plot(y)
lines(yhat,col=4,lwd=2)
library("wavethresh")
library("EbayesThresh")
nason<-function(y){
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(threshold(ywd, by.level=TRUE, policy="universal"))
list(yhat=ywr)
}
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Nason's Book
yhat<-nason(y)$yhat
plot(y)
lines(yhat,col=4,lwd=2)
?wd
#
# Generate some values in (0,1), then sort them (for plotting)
#
tt <- sort(runif(100))
#
# Now evaluate the \code{\link{doppler}} function and add
# some noise.
#
yy <- doppler(tt) + rnorm(100, 0, 0.15)
#
# Now make the grid with this data
#
yygrid <- makegrid(t=tt, y=yy)
#
# Jolly good. Now let's take the wavelet transform of this gridded data.
# Note that we have to use the \code{\link{irregwd}} function
# of the gridded data as it computes the variances of the coefficients
# as well as the coefficients themselves.
#
yyirregwd <- irregwd(yygrid)
#
# You might want to plot the coefficients
#
# If you want to see the actual coefficients you have to first convert
# the class of the yyirregwd object to a wd object and then use
# \code{\link{plot.wd}} like this
#
yyirregwd2 <- yyirregwd
class(yyirregwd2) <- "wd"
## Not run: plot(yyirregwd2)
#
# If you want to see the variance factors (essentially the coefficient
# variances divided by the overall variance). Then just use
# \code{\link{plot.irregwd}}
#
## Not run: plot(yyirregwd)
#
# Ok. So you've seen the coefficients. Now let's do some thresholding.
#
yy.thresh.sure <- threshold(yyirregwd, policy="sure", type="soft", dev=madmad)
#
# And now do the reconstruct
#
yy.wr <- wr(yy.thresh.sure)
plot(y)
plot(yy)
lines(yy.wr)
lines(-yy.wr)
plot(yy)
plot(tt,yy)
lines(tt,yy.wr)
n=10^2
tt <- sort(runif(n))
#tt <- seq(0.001953125,0.9980469,length.out=n)
mu<-doppler(tt)
yy <-mu + arima.sim(n=100,list(ar=c(0.5)),sd=0.35)
#yy <-mu + rnorm(n, 0, 0.35)
yygrid <- makegrid(t=tt, y=yy)
yyirregwd <- irregwd(yygrid)
yy.thresh.sure <- threshold(yyirregwd, policy="sure", type="soft", dev=madmad) # policy sure is suppose to deal with correlation
yy.wr <- wr(yy.thresh.sure)
plot(yygrid$gridt, yy.wr, type="l")
points(tt, yy)
lines(tt,mu,col=4,lwd=3)
yy.thresh.sure <- threshold(yyirregwd,  by.level=TRUE, policy="sure", type="soft", dev=madmad) # policy sure
yy.thresh.sure <- threshold(yyirregwd, by.level=TRUE, policy="sure", type="soft", dev=madmad)
yy.thresh.sure <-threshold(yyirregwd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywd <- wd(y)
ywd
yygrid <- makegrid(t=tt, y=yy)
yyirregwd <- irregwd(yygrid)
yyirregwd
?irregwd
t<-1:length(y)
data<-makegrid(t=t,y=y)
data
names(data)
length(y)
x=seq(0,1,length.out=200)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
plot(x,y)
t<-1:length(y)
data<-makegrid(t=t,y=y)
plot(data)
plot(data$gridt,data$gridy)
data$gridt
plot(data$gridt)
data$gridy
?makegrid
t<-seq(0,1,length.out=length(y))
data<-makegrid(t=t,y=y)
plot(data$gridt)
plot(data$gridy)
t<-seq(0,1,length.out=length(y))
data<-makegrid(t=t,y=y)
y<-data$gridy
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(ywdT)
#simulate data
#x=seq(0,1,length.out=256)
x=seq(0,1,length.out=200)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(ywdT)
#simulate data
x=seq(0,1,length.out=256)
#x=seq(0,1,length.out=200)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(ywdT)
ywdT
y
plot(y)
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(ywdT)
library("wavethresh")
library("EbayesThresh")
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(ywdT)
list(yhat=ywr)
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
library("wavethresh")
library("EbayesThresh")
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(ywdT)
list(yhat=ywr)
rm(list=ls())
#simulate data
x=seq(0,1,length.out=256)
#x=seq(0,1,length.out=200)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
plot(y)
ywd <- wd(y)
ywdT <- threshold(ywd, by.level=TRUE, policy="universal",return.thresh=TRUE)
ywr <- wr(ywdT)
list(yhat=ywr)
getwd()
setwd("/Users/francisco/Desktop/ebsc/Wang")
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
plot(y)
lines(o$yhat,lwd=2,col=4)
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
plot(y)
lines(o$yhat,lwd=2,col=4)
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
plot(y)
lines(o$yhat,lwd=2,col=4)
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
plot(y)
lines(o$yhat,lwd=2,col=4)
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
plot(y)
lines(o$yhat,lwd=2,col=4)
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
plot(y)
lines(o$yhat,lwd=2,col=4)
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
plot(y)
lines(o$yhat,lwd=2,col=4)
?arima
Arima()
?Arima
?arima
source("sourceWang.R")
plot(y,col=8)
for(i in 1:10){
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
#plot(y)
#lines(o$yhat,lwd=2,col=4)
lines(o$yhat,lwd=1,col=4)
}
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
plot(y,col=8)
for(i in 1:10){
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
#plot(y)
#lines(o$yhat,lwd=2,col=4)
lines(o$yhat,lwd=1,col=4)
}
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
plot(y,col=8)
for(i in 1:10){
print(i)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
#plot(y)
#lines(o$yhat,lwd=2,col=4)
lines(o$yhat,lwd=1,col=4)
}
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
plot(y,col=8)
for(i in 1:100){
print(i)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
#plot(y)
#lines(o$yhat,lwd=2,col=4)
lines(o$yhat,lwd=1,col=4)
}
rm(list=ls())
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
plot(y,col=8)
for(i in 1:100){
print(i)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
print(o$p.star)
#plot(y)
#lines(o$yhat,lwd=2,col=4)
lines(o$yhat,lwd=1,col=4)
}
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
plot(y,col=8)
for(i in 1:100){
print(i)
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
print(o$p.star)
#plot(y)
#lines(o$yhat,lwd=2,col=4)
lines(o$yhat,lwd=1,col=4)
}
source("sourceWang.R")
#simulate data
x=seq(0,1,length.out=256)
mu=(exp(1)^(10*x-5))/(1+exp(1)^(10*x-5))
#mu=doppler(x)
plot(y,col=8)
for(i in 1:100){
print(paste("n=",i))
noise=arima.sim(n=length(x),list(ar=c(0.5)),sd=0.1)
y=mu+noise
#Cochrane-Orcut iterations (Wang)
o<-CochraneOrcut(num.knots=5,bdeg=2,y=y)
print(o$p.star)
#plot(y)
#lines(o$yhat,lwd=2,col=4)
lines(o$yhat,lwd=1,col=4)
}
